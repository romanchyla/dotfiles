#!/bin/bash
#
# Mitchell Hashimoto's bash environment
# Much taken from Ryan Tomayko (thanks!)

# Basics
: ${HOME=~}
: ${LOGNAME=$(id -un)}
: ${UNAME=$(uname)}

# Complete hostnames from this file
: ${HOSTFILE=~/.ssh/known_hosts}

#-------------------------------------------------------------------------------
# Shell Options
#-------------------------------------------------------------------------------

# Notify bg task completion immediately
set -o notify

# Fucking mail notifications
unset MAILCHECK

# default umask
umask 0022


#-------------------------------------------------------------------------------
# Path
#-------------------------------------------------------------------------------

# Various sbins
PATH="/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin"
PATH="/usr/local/bin:$PATH"


# ~/bin if it exists
test -d "$HOME/bin" &&
PATH="$HOME/bin:$PATH"


#-------------------------------------------------------------------------------
# Env. Configuration
#-------------------------------------------------------------------------------

# detect interactive shell
case "$-" in
    *i*) INTERACTIVE=yes ;;
    *)   unset INTERACTIVE ;;
esac

# detect login shell
case "$0" in
    -*) LOGIN=yes ;;
    *)  unset LOGIN ;;
esac

# Proper locale
: ${LANG:="en_US.UTF-8"}
: ${LANGUAGE:="en"}
: ${LC_CTYPE:="en_US.UTF-8"}
: ${LC_ALL:="en_US.UTF-8"}
export LANG LANGUAGE LC_CTYPE LC_ALL

# Always use passive mode FTP
: ${FTP_PASSIVE:=1}
export FTP_PASSIVE

# Ignore backups, CVS directories
FIGNORE="~:CVS:#:.pyc"
HISTCONTROL=ignoredups:ignorespace
# append to the history file, don't overwrite it
shopt -s histappend
# reedit a history substitution line if it failed
shopt -s histreedit
# edit a recalled hisotry line before executing
shopt -s histverify
HISTSIZE=1000
HISTFILESIZE=2000

# check window size after each command and update if
# necessary (values of LINES and COLUMNS)
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


#-------------------------------------------------------------------------------
# Editor and Pager
#-------------------------------------------------------------------------------
EDITOR="vim"
export EDITOR

PAGER="less -FirSwX"
MANPAGER="$PAGER"
export PAGER MANPAGER

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Aliases / Functions
#-------------------------------------------------------------------------------




# Usage: puniq [path]
# Remove duplicate entries from a PATH style value while
# retaining the original order.
puniq() {
    echo "$1" |tr : '\n' |nl |sort -u -k 2,2 |sort -n |
    cut -f 2- |tr '\n' : |sed -e 's/:$//' -e 's/^://'
}

#-------------------------------------------------------------------------------
# SSH Agent
#-------------------------------------------------------------------------------
SSH_ENV=$HOME/.ssh/environment

function start_ssh_agent {
     ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
     chmod 0600 ${SSH_ENV}
     . ${SSH_ENV} > /dev/null
     ssh-add
}

# Source SSH agent settings if it is already running, otherwise start
# up the agent proprely.
if [ -f "${SSH_ENV}" ]; then
     . ${SSH_ENV} > /dev/null

     # Check for broken SSH socket
     if [ ! -S "${SSH_AUTH_SOCK}" -o ! -w "${SSH_AUTH_SOCK}" ]; then
         echo "Removing ~/.ssh/environment as socket is broken"
	 rm ${SSH_ENV}
         start_ssh_agent
     fi


     # ps ${SSH_AGENT_PID} doesn't work under cywgin
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
         start_ssh_agent
     }
else
     start_ssh_agent
fi

#-------------------------------------------------------------------------------
# Other
#-------------------------------------------------------------------------------
# Plugins
PLUGINS=( "depot_tools" "git" "java" "tmux" "windows" )

for plugin in `ls ~/.bash.d`
do
  plugin_path="$HOME/.bash.d/${plugin}"
  test -f $plugin_path && source $plugin_path
done

#-------------------------------------------------------------------------------
# User Shell Environment
#-------------------------------------------------------------------------------


# Always put /usr/local/bin first.
PATH="/usr/local/bin:/usr/bin:$PATH"

PATH=$(puniq $PATH)
MANPATH=$(puniq $MANPATH)


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# prevent ctrl-d logouts
export ignoreeof=3

# Make C-S pass to the app
if [ -t 1 ]; then
  bind -r '\C-s'
  stty -ixon 2> /dev/null
fi


[ -f ~/.localenv ] && source ~/.localenv
[ -f ~/.tmux/.tmuxrc ] && source ~/.tmux/.tmuxrc



# -------------------------------------------------------------------
#    some cool functions
# -------------------------------------------------------------------

welcome() {
    echo -e "\nWelcome $USER\n"; cal ;
    echo -e ""
    echo -ne "Up time:";uptime | awk /'up/'
    echo -en "\nExternal IP Address :\n" 
    echo -e `myip`
    echo -e "\nInternal IP Address:"; echo -e "`ip addr | grep inet | grep scope | grep -v inet6| grep -v '127.0.0.1' | sed 's/\/..$//'`"
    echo 
}
welcome;

# get current host related info
ii () {
    echo -e "\nYou are logged as $USER on " `hostname`
    echo -ne "Today is "; date #date +"Today is %A %D, and it is now %R"
    echo -e "\nAdditionnal information:" ; uname -a
    echo -e "\nUsers logged on: " ; w -h
    echo -e "\nCurrent date : " ; date
    echo -e "\nMachine stats : " ; uptime
    echo -e "\nMemory stats : " ; free
    echo -en "\nExternal IP Address :\n" 
    echo -e `myip`
    echo -e "\nInternal IP Address:"; echo -e "`ip addr | grep inet | grep scope | grep -v inet6| grep -v '127.0.0.1' | sed 's/\/..$//'`"
    echo 
}

  

upinfo () {
echo -ne "${green}$HOSTNAME ${red}uptime is ${cyan} \t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
}

#every command puts a line in my ~/.bash_eternal_history
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }"'echo `dt` `pwd` $$ $USER \
               "$(history 1)" >> ~/.bash_eternal_history'